'use strict';

var _ = require('lodash');
var util = require('util');

var parser = require('./parser');

var arraySort = function arraySort(a, b) {
  if (a > b) return 1;
  if (a < b) return -1;
  return 0;
};

var normalizeTypeDef = function normalizeTypeDef(typeDef) {
  return typeDef.replace(/[\s]/g, '').replace(/varchar/g, 'text').replace(/frozen/ig, 'frozen');
};

var normalizer = {
  normalize_replication_option(replicationOptions) {
    var normalizedReplicationOptions = replicationOptions;
    Object.keys(normalizedReplicationOptions).forEach(function (key) {
      if (key === 'class') {
        normalizedReplicationOptions[key] = normalizedReplicationOptions[key].replace('org.apache.cassandra.locator.', '');
        return;
      }
      normalizedReplicationOptions[key] = parseInt(normalizedReplicationOptions[key], 10);
    });
    return normalizedReplicationOptions;
  },

  normalize_query_option(options) {
    var queryOptions = { prepare: options.prepare };
    if (options.consistency) queryOptions.consistency = options.consistency;
    if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
    if (options.autoPage) queryOptions.autoPage = options.autoPage;
    if (options.hints) queryOptions.hints = options.hints;
    if (options.pageState) queryOptions.pageState = options.pageState;
    if (options.retry) queryOptions.retry = options.retry;
    if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;
    if (options.customPayload) queryOptions.customPayload = options.customPayload;
    if (options.isIdempotent) queryOptions.isIdempotent = options.isIdempotent;
    if (options.readTimeout) queryOptions.readTimeout = options.readTimeout;
    if (options.retry) queryOptions.retry = options.retry;
    if (options.retryOnTimeout) queryOptions.retryOnTimeout = options.retryOnTimeout;
    if (options.routingIndexes) queryOptions.routingIndexes = options.routingIndexes;
    if (options.routingKey) queryOptions.routingKey = options.routingKey;
    if (options.routingNames) queryOptions.routingNames = options.routingNames;
    if (options.timestamp) queryOptions.timestamp = options.timestamp;
    return queryOptions;
  },

  normalize_user_defined_type(fieldType) {
    var normalizedFieldType = normalizeTypeDef(fieldType);
    if (normalizedFieldType.includes('<') && !normalizedFieldType.startsWith('frozen<')) {
      normalizedFieldType = util.format('frozen<%s>', normalizedFieldType);
    }
    return normalizedFieldType;
  },

  normalize_primary_key(outputSchema) {
    if (outputSchema.key && typeof outputSchema.key[0] === 'string') {
      outputSchema.key[0] = [outputSchema.key[0]];
    }

    if (outputSchema.key && outputSchema.key.length) {
      for (var i = 1; i < outputSchema.key.length; i++) {
        if (!outputSchema.clustering_order) outputSchema.clustering_order = {};
        if (!outputSchema.clustering_order[outputSchema.key[i]]) {
          outputSchema.clustering_order[outputSchema.key[i]] = 'ASC';
        }

        // eslint-disable-next-line max-len
        outputSchema.clustering_order[outputSchema.key[i]] = outputSchema.clustering_order[outputSchema.key[i]].toUpperCase();
      }
    }
  },

  normalize_fields(modelSchema, outputSchema) {
    Object.keys(outputSchema.fields).forEach(function (fieldName) {
      if (typeof outputSchema.fields[fieldName] === 'string') {
        outputSchema.fields[fieldName] = { type: outputSchema.fields[fieldName] };
      }

      if (fieldName === 'solr_query' || outputSchema.fields[fieldName].virtual) {
        delete outputSchema.fields[fieldName];
        return;
      }

      if (outputSchema.fields[fieldName].typeDef) {
        outputSchema.fields[fieldName] = {
          type: outputSchema.fields[fieldName].type,
          typeDef: outputSchema.fields[fieldName].typeDef
        };
      } else {
        outputSchema.fields[fieldName] = { type: outputSchema.fields[fieldName].type };
      }

      if (outputSchema.fields[fieldName].type === 'varchar') {
        outputSchema.fields[fieldName].type = 'text';
      }

      if (['map', 'list', 'set', 'frozen'].includes(outputSchema.fields[fieldName].type)) {
        if (modelSchema.typeMaps && modelSchema.typeMaps[fieldName]) {
          outputSchema.fields[fieldName].typeDef = modelSchema.typeMaps[fieldName];
        } else {
          outputSchema.fields[fieldName].typeDef = normalizeTypeDef(outputSchema.fields[fieldName].typeDef);
        }
      }

      if (modelSchema.staticMaps && modelSchema.staticMaps[fieldName] === true) {
        outputSchema.fields[fieldName].static = true;
      } else if (modelSchema.fields[fieldName].static) {
        outputSchema.fields[fieldName].static = true;
      }
    });
  },

  normalize_materialized_views(outputSchema) {
    if (!outputSchema.materialized_views) {
      outputSchema.materialized_views = {};
    }

    Object.keys(outputSchema.materialized_views).forEach(function (materializedViewName) {
      var outputMView = outputSchema.materialized_views[materializedViewName];
      // make parition key an array
      if (outputMView.key && typeof outputMView.key[0] === 'string') {
        outputMView.key[0] = [outputMView.key[0]];
      }

      // add clustering_order for all clustering keys
      if (outputMView.key && outputMView.key.length) {
        for (var i = 1; i < outputMView.key.length; i++) {
          if (!outputMView.clustering_order) {
            outputMView.clustering_order = {};
          }
          if (!outputMView.clustering_order[outputMView.key[i]]) {
            outputMView.clustering_order[outputMView.key[i]] = 'ASC';
          }
          // eslint-disable-next-line max-len
          outputMView.clustering_order[outputMView.key[i]] = outputMView.clustering_order[outputMView.key[i]].toUpperCase();
        }
      }

      // add all non existent primary key items to select and sort them
      for (var pkeyIndex = 0; pkeyIndex < outputMView.key.length; pkeyIndex++) {
        if (pkeyIndex === 0) {
          for (var partitionIndex = 0; partitionIndex < outputMView.key[pkeyIndex].length; partitionIndex++) {
            if (!outputMView.select.includes(outputMView.key[pkeyIndex][partitionIndex])) {
              outputMView.select.push(outputMView.key[pkeyIndex][partitionIndex]);
            }
          }
        } else if (!outputMView.select.includes(outputMView.key[pkeyIndex])) {
          outputMView.select.push(outputMView.key[pkeyIndex]);
        }
      }

      // check if select has * and then add all fields to select
      if (outputMView.select[0] === '*') {
        outputMView.select = Object.keys(outputSchema.fields);
      }

      outputMView.select.sort(arraySort);

      if (!outputMView.where_clause) {
        outputMView.where_clause = parser.get_mview_where_clause(outputSchema, outputMView);
      }
      if (_.isPlainObject(outputMView.filters)) {
        delete outputMView.filters;
      }
    });
  },

  normalize_indexes(outputSchema) {
    if (!outputSchema.indexes) {
      outputSchema.indexes = [];
    }
    for (var i = 0; i < outputSchema.indexes.length; i++) {
      var indexNameList = outputSchema.indexes[i].replace(/["\s]/g, '').split(/[()]/g);
      if (indexNameList.length > 1) {
        indexNameList[0] = indexNameList[0].toLowerCase();
        if (indexNameList[0] === 'values') outputSchema.indexes[i] = indexNameList[1];else outputSchema.indexes[i] = util.format('%s(%s)', indexNameList[0], indexNameList[1]);
      } else {
        outputSchema.indexes[i] = indexNameList[0];
      }
    }
    outputSchema.indexes.sort(arraySort);
  },

  normalize_custom_indexes(outputSchema) {
    if (outputSchema.custom_index) {
      outputSchema.custom_indexes = [outputSchema.custom_index];
      delete outputSchema.custom_index;
    }

    if (outputSchema.custom_indexes) {
      var customArraySort = function customArraySort(a, b) {
        if (a.on > b.on) return 1;
        if (a.on < b.on) return -1;

        if (a.using > b.using) return 1;
        if (a.using < b.using) return -1;

        if (a.options > b.options) return 1;
        if (a.options < b.options) return -1;

        return 0;
      };

      outputSchema.custom_indexes.sort(customArraySort);
    } else {
      outputSchema.custom_indexes = [];
    }

    outputSchema.custom_indexes = _.remove(outputSchema.custom_indexes, function (cindex) {
      return cindex.on !== 'solr_query';
    });
  },

  normalize_model_schema(modelSchema) {
    var outputSchema = _.cloneDeep(modelSchema, true);
    var normalizableSchemaProperties = ['fields', 'key', 'clustering_order', 'materialized_views', 'indexes', 'custom_index', 'custom_indexes'];

    Object.keys(outputSchema).forEach(function (schemaProperty) {
      if (!normalizableSchemaProperties.includes(schemaProperty)) {
        delete outputSchema[schemaProperty];
      }
    });

    this.normalize_fields(modelSchema, outputSchema);
    this.normalize_primary_key(outputSchema);
    this.normalize_materialized_views(outputSchema);
    this.normalize_indexes(outputSchema);
    this.normalize_custom_indexes(outputSchema);

    return outputSchema;
  },

  remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName) {
    var dependentViews = [];
    Object.keys(normalizedDBSchema.materialized_views).forEach(function (dbViewName) {
      if (normalizedDBSchema.materialized_views[dbViewName].select.includes(fieldName)) {
        dependentViews.push(dbViewName);
      } else if (normalizedDBSchema.materialized_views[dbViewName].select[0] === '*') {
        dependentViews.push(dbViewName);
      } else if (normalizedDBSchema.materialized_views[dbViewName].key.includes(fieldName)) {
        dependentViews.push(dbViewName);
      } else if (_.isArray(normalizedDBSchema.materialized_views[dbViewName].key[0]) && normalizedDBSchema.materialized_views[dbViewName].key[0].includes(fieldName)) {
        dependentViews.push(dbViewName);
      }
    });
    dependentViews.forEach(function (viewName) {
      normalizedDBSchema.materialized_views[viewName] = {};
    });
  }
};

module.exports = normalizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3JtYWxpemVyLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidXRpbCIsInBhcnNlciIsImFycmF5U29ydCIsImEiLCJiIiwibm9ybWFsaXplVHlwZURlZiIsInR5cGVEZWYiLCJyZXBsYWNlIiwibm9ybWFsaXplciIsIm5vcm1hbGl6ZV9yZXBsaWNhdGlvbl9vcHRpb24iLCJyZXBsaWNhdGlvbk9wdGlvbnMiLCJub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJwYXJzZUludCIsIm5vcm1hbGl6ZV9xdWVyeV9vcHRpb24iLCJvcHRpb25zIiwicXVlcnlPcHRpb25zIiwicHJlcGFyZSIsImNvbnNpc3RlbmN5IiwiZmV0Y2hTaXplIiwiYXV0b1BhZ2UiLCJoaW50cyIsInBhZ2VTdGF0ZSIsInJldHJ5Iiwic2VyaWFsQ29uc2lzdGVuY3kiLCJjdXN0b21QYXlsb2FkIiwiaXNJZGVtcG90ZW50IiwicmVhZFRpbWVvdXQiLCJyZXRyeU9uVGltZW91dCIsInJvdXRpbmdJbmRleGVzIiwicm91dGluZ0tleSIsInJvdXRpbmdOYW1lcyIsInRpbWVzdGFtcCIsIm5vcm1hbGl6ZV91c2VyX2RlZmluZWRfdHlwZSIsImZpZWxkVHlwZSIsIm5vcm1hbGl6ZWRGaWVsZFR5cGUiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJmb3JtYXQiLCJub3JtYWxpemVfcHJpbWFyeV9rZXkiLCJvdXRwdXRTY2hlbWEiLCJsZW5ndGgiLCJpIiwiY2x1c3RlcmluZ19vcmRlciIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplX2ZpZWxkcyIsIm1vZGVsU2NoZW1hIiwiZmllbGRzIiwiZmllbGROYW1lIiwidHlwZSIsInZpcnR1YWwiLCJ0eXBlTWFwcyIsInN0YXRpY01hcHMiLCJzdGF0aWMiLCJub3JtYWxpemVfbWF0ZXJpYWxpemVkX3ZpZXdzIiwibWF0ZXJpYWxpemVkX3ZpZXdzIiwibWF0ZXJpYWxpemVkVmlld05hbWUiLCJvdXRwdXRNVmlldyIsInBrZXlJbmRleCIsInBhcnRpdGlvbkluZGV4Iiwic2VsZWN0IiwicHVzaCIsInNvcnQiLCJ3aGVyZV9jbGF1c2UiLCJnZXRfbXZpZXdfd2hlcmVfY2xhdXNlIiwiaXNQbGFpbk9iamVjdCIsImZpbHRlcnMiLCJub3JtYWxpemVfaW5kZXhlcyIsImluZGV4ZXMiLCJpbmRleE5hbWVMaXN0Iiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZV9jdXN0b21faW5kZXhlcyIsImN1c3RvbV9pbmRleCIsImN1c3RvbV9pbmRleGVzIiwiY3VzdG9tQXJyYXlTb3J0Iiwib24iLCJ1c2luZyIsInJlbW92ZSIsImNpbmRleCIsIm5vcm1hbGl6ZV9tb2RlbF9zY2hlbWEiLCJjbG9uZURlZXAiLCJub3JtYWxpemFibGVTY2hlbWFQcm9wZXJ0aWVzIiwic2NoZW1hUHJvcGVydHkiLCJyZW1vdmVfZGVwZW5kZW50X3ZpZXdzX2Zyb21fbm9ybWFsaXplZF9zY2hlbWEiLCJub3JtYWxpemVkREJTY2hlbWEiLCJkYlNjaGVtYSIsImRlcGVuZGVudFZpZXdzIiwiZGJWaWV3TmFtZSIsImlzQXJyYXkiLCJ2aWV3TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsSUFBSUMsUUFBUSxRQUFSLENBQVY7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjs7QUFFQSxJQUFNRSxTQUFTRixRQUFRLFVBQVIsQ0FBZjs7QUFFQSxJQUFNRyxZQUFZLFNBQVpBLFNBQVksQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQVU7QUFDMUIsTUFBSUQsSUFBSUMsQ0FBUixFQUFXLE9BQU8sQ0FBUDtBQUNYLE1BQUlELElBQUlDLENBQVIsRUFBVyxPQUFPLENBQUMsQ0FBUjtBQUNYLFNBQU8sQ0FBUDtBQUNELENBSkQ7O0FBTUEsSUFBTUMsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsT0FBRDtBQUFBLFNBQWFBLFFBQVFDLE9BQVIs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QjtBQUNEO0FBQ0YsS0FYRDtBQVlBRCxtQkFBZTVFLE9BQWYsQ0FBdUIsVUFBQytFLFFBQUQsRUFBYztBQUNuQ0wseUJBQW1COUIsa0JBQW5CLENBQXNDbUMsUUFBdEMsSUFBa0QsRUFBbEQ7QUFDRCxLQUZEO0FBR0Q7QUE5T2dCLENBQW5COztBQWlQQUMsT0FBT0MsT0FBUCxHQUFpQnZGLFVBQWpCIiwiZmlsZSI6Im5vcm1hbGl6ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG5jb25zdCBhcnJheVNvcnQgPSAoYSwgYikgPT4ge1xuICBpZiAoYSA+IGIpIHJldHVybiAxO1xuICBpZiAoYSA8IGIpIHJldHVybiAtMTtcbiAgcmV0dXJuIDA7XG59O1xuXG5jb25zdCBub3JtYWxpemVUeXBlRGVmID0gKHR5cGVEZWYpID0+IHR5cGVEZWYucmVwbGFjZSgvW1xcc10vZywgJycpLnJlcGxhY2UoL3ZhcmNoYXIvZywgJ3RleHQnKS5yZXBsYWNlKC9mcm96ZW4vaWcsICdmcm96ZW4nKTtcblxuY29uc3Qgbm9ybWFsaXplciA9IHtcbiAgbm9ybWFsaXplX3JlcGxpY2F0aW9uX29wdGlvbihyZXBsaWNhdGlvbk9wdGlvbnMpIHtcbiAgICBjb25zdCBub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zID0gcmVwbGljYXRpb25PcHRpb25zO1xuICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWRSZXBsaWNhdGlvbk9wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xuICAgICAgICBub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zW2tleV0gPSBub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zW2tleV0ucmVwbGFjZSgnb3JnLmFwYWNoZS5jYXNzYW5kcmEubG9jYXRvci4nLCAnJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZWRSZXBsaWNhdGlvbk9wdGlvbnNba2V5XSA9IHBhcnNlSW50KG5vcm1hbGl6ZWRSZXBsaWNhdGlvbk9wdGlvbnNba2V5XSwgMTApO1xuICAgIH0pO1xuICAgIHJldHVybiBub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zO1xuICB9LFxuXG4gIG5vcm1hbGl6ZV9xdWVyeV9vcHRpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IHsgcHJlcGFyZTogb3B0aW9ucy5wcmVwYXJlIH07XG4gICAgaWYgKG9wdGlvbnMuY29uc2lzdGVuY3kpIHF1ZXJ5T3B0aW9ucy5jb25zaXN0ZW5jeSA9IG9wdGlvbnMuY29uc2lzdGVuY3k7XG4gICAgaWYgKG9wdGlvbnMuZmV0Y2hTaXplKSBxdWVyeU9wdGlvbnMuZmV0Y2hTaXplID0gb3B0aW9ucy5mZXRjaFNpemU7XG4gICAgaWYgKG9wdGlvbnMuYXV0b1BhZ2UpIHF1ZXJ5T3B0aW9ucy5hdXRvUGFnZSA9IG9wdGlvbnMuYXV0b1BhZ2U7XG4gICAgaWYgKG9wdGlvbnMuaGludHMpIHF1ZXJ5T3B0aW9ucy5oaW50cyA9IG9wdGlvbnMuaGludHM7XG4gICAgaWYgKG9wdGlvbnMucGFnZVN0YXRlKSBxdWVyeU9wdGlvbnMucGFnZVN0YXRlID0gb3B0aW9ucy5wYWdlU3RhdGU7XG4gICAgaWYgKG9wdGlvbnMucmV0cnkpIHF1ZXJ5T3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnk7XG4gICAgaWYgKG9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kpIHF1ZXJ5T3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeSA9IG9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3k7XG4gICAgaWYgKG9wdGlvbnMuY3VzdG9tUGF5bG9hZCkgcXVlcnlPcHRpb25zLmN1c3RvbVBheWxvYWQgPSBvcHRpb25zLmN1c3RvbVBheWxvYWQ7XG4gICAgaWYgKG9wdGlvbnMuaXNJZGVtcG90ZW50KSBxdWVyeU9wdGlvbnMuaXNJZGVtcG90ZW50ID0gb3B0aW9ucy5pc0lkZW1wb3RlbnQ7XG4gICAgaWYgKG9wdGlvbnMucmVhZFRpbWVvdXQpIHF1ZXJ5T3B0aW9ucy5yZWFkVGltZW91dCA9IG9wdGlvbnMucmVhZFRpbWVvdXQ7XG4gICAgaWYgKG9wdGlvbnMucmV0cnkpIHF1ZXJ5T3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnk7XG4gICAgaWYgKG9wdGlvbnMucmV0cnlPblRpbWVvdXQpIHF1ZXJ5T3B0aW9ucy5yZXRyeU9uVGltZW91dCA9IG9wdGlvbnMucmV0cnlPblRpbWVvdXQ7XG4gICAgaWYgKG9wdGlvbnMucm91dGluZ0luZGV4ZXMpIHF1ZXJ5T3B0aW9ucy5yb3V0aW5nSW5kZXhlcyA9IG9wdGlvbnMucm91dGluZ0luZGV4ZXM7XG4gICAgaWYgKG9wdGlvbnMucm91dGluZ0tleSkgcXVlcnlPcHRpb25zLnJvdXRpbmdLZXkgPSBvcHRpb25zLnJvdXRpbmdLZXk7XG4gICAgaWYgKG9wdGlvbnMucm91dGluZ05hbWVzKSBxdWVyeU9wdGlvbnMucm91dGluZ05hbWVzID0gb3B0aW9ucy5yb3V0aW5nTmFtZXM7XG4gICAgaWYgKG9wdGlvbnMudGltZXN0YW1wKSBxdWVyeU9wdGlvbnMudGltZXN0YW1wID0gb3B0aW9ucy50aW1lc3RhbXA7XG4gICAgcmV0dXJuIHF1ZXJ5T3B0aW9ucztcbiAgfSxcblxuICBub3JtYWxpemVfdXNlcl9kZWZpbmVkX3R5cGUoZmllbGRUeXBlKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWRGaWVsZFR5cGUgPSBub3JtYWxpemVUeXBlRGVmKGZpZWxkVHlwZSk7XG4gICAgaWYgKG5vcm1hbGl6ZWRGaWVsZFR5cGUuaW5jbHVkZXMoJzwnKSAmJiAhbm9ybWFsaXplZEZpZWxkVHlwZS5zdGFydHNXaXRoKCdmcm96ZW48JykpIHtcbiAgICAgIG5vcm1hbGl6ZWRGaWVsZFR5cGUgPSB1dGlsLmZvcm1hdCgnZnJvemVuPCVzPicsIG5vcm1hbGl6ZWRGaWVsZFR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZEZpZWxkVHlwZTtcbiAgfSxcblxuICBub3JtYWxpemVfcHJpbWFyeV9rZXkob3V0cHV0U2NoZW1hKSB7XG4gICAgaWYgKG91dHB1dFNjaGVtYS5rZXkgJiYgdHlwZW9mIG91dHB1dFNjaGVtYS5rZXlbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBvdXRwdXRTY2hlbWEua2V5WzBdID0gW291dHB1dFNjaGVtYS5rZXlbMF1dO1xuICAgIH1cblxuICAgIGlmIChvdXRwdXRTY2hlbWEua2V5ICYmIG91dHB1dFNjaGVtYS5rZXkubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG91dHB1dFNjaGVtYS5rZXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvdXRwdXRTY2hlbWEuY2x1c3RlcmluZ19vcmRlcikgb3V0cHV0U2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXIgPSB7fTtcbiAgICAgICAgaWYgKCFvdXRwdXRTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltvdXRwdXRTY2hlbWEua2V5W2ldXSkge1xuICAgICAgICAgIG91dHB1dFNjaGVtYS5jbHVzdGVyaW5nX29yZGVyW291dHB1dFNjaGVtYS5rZXlbaV1dID0gJ0FTQyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICBvdXRwdXRTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltvdXRwdXRTY2hlbWEua2V5W2ldXSA9IG91dHB1dFNjaGVtYS5jbHVzdGVyaW5nX29yZGVyW291dHB1dFNjaGVtYS5rZXlbaV1dLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG5vcm1hbGl6ZV9maWVsZHMobW9kZWxTY2hlbWEsIG91dHB1dFNjaGVtYSkge1xuICAgIE9iamVjdC5rZXlzKG91dHB1dFNjaGVtYS5maWVsZHMpLmZvckVhY2goKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiAob3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdID0geyB0eXBlOiBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkTmFtZSA9PT0gJ3NvbHJfcXVlcnknIHx8IG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS52aXJ0dWFsKSB7XG4gICAgICAgIGRlbGV0ZSBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlRGVmKSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXSA9IHtcbiAgICAgICAgICB0eXBlOiBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSxcbiAgICAgICAgICB0eXBlRGVmOiBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZixcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXSA9IHsgdHlwZTogb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAndmFyY2hhcicpIHtcbiAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPSAndGV4dCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChbJ21hcCcsICdsaXN0JywgJ3NldCcsICdmcm96ZW4nXS5pbmNsdWRlcyhvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSkpIHtcbiAgICAgICAgaWYgKG1vZGVsU2NoZW1hLnR5cGVNYXBzICYmIG1vZGVsU2NoZW1hLnR5cGVNYXBzW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgICBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZiA9IG1vZGVsU2NoZW1hLnR5cGVNYXBzW2ZpZWxkTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGVEZWYgPSBub3JtYWxpemVUeXBlRGVmKG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlRGVmKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobW9kZWxTY2hlbWEuc3RhdGljTWFwcyAmJiBtb2RlbFNjaGVtYS5zdGF0aWNNYXBzW2ZpZWxkTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnN0YXRpYyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG1vZGVsU2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnN0YXRpYykge1xuICAgICAgICBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0uc3RhdGljID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBub3JtYWxpemVfbWF0ZXJpYWxpemVkX3ZpZXdzKG91dHB1dFNjaGVtYSkge1xuICAgIGlmICghb3V0cHV0U2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cykge1xuICAgICAgb3V0cHV0U2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cyA9IHt9O1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKG91dHB1dFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpLmZvckVhY2goKG1hdGVyaWFsaXplZFZpZXdOYW1lKSA9PiB7XG4gICAgICBjb25zdCBvdXRwdXRNVmlldyA9IG91dHB1dFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3NbbWF0ZXJpYWxpemVkVmlld05hbWVdO1xuICAgICAgLy8gbWFrZSBwYXJpdGlvbiBrZXkgYW4gYXJyYXlcbiAgICAgIGlmIChvdXRwdXRNVmlldy5rZXkgJiYgdHlwZW9mIG91dHB1dE1WaWV3LmtleVswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3V0cHV0TVZpZXcua2V5WzBdID0gW291dHB1dE1WaWV3LmtleVswXV07XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBjbHVzdGVyaW5nX29yZGVyIGZvciBhbGwgY2x1c3RlcmluZyBrZXlzXG4gICAgICBpZiAob3V0cHV0TVZpZXcua2V5ICYmIG91dHB1dE1WaWV3LmtleS5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBvdXRwdXRNVmlldy5rZXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIW91dHB1dE1WaWV3LmNsdXN0ZXJpbmdfb3JkZXIpIHtcbiAgICAgICAgICAgIG91dHB1dE1WaWV3LmNsdXN0ZXJpbmdfb3JkZXIgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyW291dHB1dE1WaWV3LmtleVtpXV0pIHtcbiAgICAgICAgICAgIG91dHB1dE1WaWV3LmNsdXN0ZXJpbmdfb3JkZXJbb3V0cHV0TVZpZXcua2V5W2ldXSA9ICdBU0MnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgIG91dHB1dE1WaWV3LmNsdXN0ZXJpbmdfb3JkZXJbb3V0cHV0TVZpZXcua2V5W2ldXSA9IG91dHB1dE1WaWV3LmNsdXN0ZXJpbmdfb3JkZXJbb3V0cHV0TVZpZXcua2V5W2ldXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBhbGwgbm9uIGV4aXN0ZW50IHByaW1hcnkga2V5IGl0ZW1zIHRvIHNlbGVjdCBhbmQgc29ydCB0aGVtXG4gICAgICBmb3IgKGxldCBwa2V5SW5kZXggPSAwOyBwa2V5SW5kZXggPCBvdXRwdXRNVmlldy5rZXkubGVuZ3RoOyBwa2V5SW5kZXgrKykge1xuICAgICAgICBpZiAocGtleUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgcGFydGl0aW9uSW5kZXggPSAwOyBwYXJ0aXRpb25JbmRleCA8IG91dHB1dE1WaWV3LmtleVtwa2V5SW5kZXhdLmxlbmd0aDsgcGFydGl0aW9uSW5kZXgrKykge1xuICAgICAgICAgICAgaWYgKCFvdXRwdXRNVmlldy5zZWxlY3QuaW5jbHVkZXMob3V0cHV0TVZpZXcua2V5W3BrZXlJbmRleF1bcGFydGl0aW9uSW5kZXhdKSkge1xuICAgICAgICAgICAgICBvdXRwdXRNVmlldy5zZWxlY3QucHVzaChvdXRwdXRNVmlldy5rZXlbcGtleUluZGV4XVtwYXJ0aXRpb25JbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghb3V0cHV0TVZpZXcuc2VsZWN0LmluY2x1ZGVzKG91dHB1dE1WaWV3LmtleVtwa2V5SW5kZXhdKSkge1xuICAgICAgICAgIG91dHB1dE1WaWV3LnNlbGVjdC5wdXNoKG91dHB1dE1WaWV3LmtleVtwa2V5SW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiBzZWxlY3QgaGFzICogYW5kIHRoZW4gYWRkIGFsbCBmaWVsZHMgdG8gc2VsZWN0XG4gICAgICBpZiAob3V0cHV0TVZpZXcuc2VsZWN0WzBdID09PSAnKicpIHtcbiAgICAgICAgb3V0cHV0TVZpZXcuc2VsZWN0ID0gT2JqZWN0LmtleXMob3V0cHV0U2NoZW1hLmZpZWxkcyk7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dE1WaWV3LnNlbGVjdC5zb3J0KGFycmF5U29ydCk7XG5cbiAgICAgIGlmICghb3V0cHV0TVZpZXcud2hlcmVfY2xhdXNlKSB7XG4gICAgICAgIG91dHB1dE1WaWV3LndoZXJlX2NsYXVzZSA9IHBhcnNlci5nZXRfbXZpZXdfd2hlcmVfY2xhdXNlKG91dHB1dFNjaGVtYSwgb3V0cHV0TVZpZXcpO1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChvdXRwdXRNVmlldy5maWx0ZXJzKSkge1xuICAgICAgICBkZWxldGUgb3V0cHV0TVZpZXcuZmlsdGVycztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBub3JtYWxpemVfaW5kZXhlcyhvdXRwdXRTY2hlbWEpIHtcbiAgICBpZiAoIW91dHB1dFNjaGVtYS5pbmRleGVzKSB7XG4gICAgICBvdXRwdXRTY2hlbWEuaW5kZXhlcyA9IFtdO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dFNjaGVtYS5pbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbmRleE5hbWVMaXN0ID0gb3V0cHV0U2NoZW1hLmluZGV4ZXNbaV0ucmVwbGFjZSgvW1wiXFxzXS9nLCAnJykuc3BsaXQoL1soKV0vZyk7XG4gICAgICBpZiAoaW5kZXhOYW1lTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGluZGV4TmFtZUxpc3RbMF0gPSBpbmRleE5hbWVMaXN0WzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChpbmRleE5hbWVMaXN0WzBdID09PSAndmFsdWVzJykgb3V0cHV0U2NoZW1hLmluZGV4ZXNbaV0gPSBpbmRleE5hbWVMaXN0WzFdO1xuICAgICAgICBlbHNlIG91dHB1dFNjaGVtYS5pbmRleGVzW2ldID0gdXRpbC5mb3JtYXQoJyVzKCVzKScsIGluZGV4TmFtZUxpc3RbMF0sIGluZGV4TmFtZUxpc3RbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0U2NoZW1hLmluZGV4ZXNbaV0gPSBpbmRleE5hbWVMaXN0WzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXRTY2hlbWEuaW5kZXhlcy5zb3J0KGFycmF5U29ydCk7XG4gIH0sXG5cbiAgbm9ybWFsaXplX2N1c3RvbV9pbmRleGVzKG91dHB1dFNjaGVtYSkge1xuICAgIGlmIChvdXRwdXRTY2hlbWEuY3VzdG9tX2luZGV4KSB7XG4gICAgICBvdXRwdXRTY2hlbWEuY3VzdG9tX2luZGV4ZXMgPSBbb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleF07XG4gICAgICBkZWxldGUgb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleDtcbiAgICB9XG5cbiAgICBpZiAob3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzKSB7XG4gICAgICBjb25zdCBjdXN0b21BcnJheVNvcnQgPSAoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYS5vbiA+IGIub24pIHJldHVybiAxO1xuICAgICAgICBpZiAoYS5vbiA8IGIub24pIHJldHVybiAtMTtcblxuICAgICAgICBpZiAoYS51c2luZyA+IGIudXNpbmcpIHJldHVybiAxO1xuICAgICAgICBpZiAoYS51c2luZyA8IGIudXNpbmcpIHJldHVybiAtMTtcblxuICAgICAgICBpZiAoYS5vcHRpb25zID4gYi5vcHRpb25zKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEub3B0aW9ucyA8IGIub3B0aW9ucykgcmV0dXJuIC0xO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfTtcblxuICAgICAgb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzLnNvcnQoY3VzdG9tQXJyYXlTb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzID0gW107XG4gICAgfVxuXG4gICAgb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzID0gXy5yZW1vdmUob3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzLCAoY2luZGV4KSA9PiAoY2luZGV4Lm9uICE9PSAnc29scl9xdWVyeScpKTtcbiAgfSxcblxuICBub3JtYWxpemVfbW9kZWxfc2NoZW1hKG1vZGVsU2NoZW1hKSB7XG4gICAgY29uc3Qgb3V0cHV0U2NoZW1hID0gXy5jbG9uZURlZXAobW9kZWxTY2hlbWEsIHRydWUpO1xuICAgIGNvbnN0IG5vcm1hbGl6YWJsZVNjaGVtYVByb3BlcnRpZXMgPSBbXG4gICAgICAnZmllbGRzJywgJ2tleScsICdjbHVzdGVyaW5nX29yZGVyJywgJ21hdGVyaWFsaXplZF92aWV3cycsICdpbmRleGVzJywgJ2N1c3RvbV9pbmRleCcsICdjdXN0b21faW5kZXhlcycsXG4gICAgXTtcblxuICAgIE9iamVjdC5rZXlzKG91dHB1dFNjaGVtYSkuZm9yRWFjaCgoc2NoZW1hUHJvcGVydHkpID0+IHtcbiAgICAgIGlmICghbm9ybWFsaXphYmxlU2NoZW1hUHJvcGVydGllcy5pbmNsdWRlcyhzY2hlbWFQcm9wZXJ0eSkpIHtcbiAgICAgICAgZGVsZXRlIG91dHB1dFNjaGVtYVtzY2hlbWFQcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm5vcm1hbGl6ZV9maWVsZHMobW9kZWxTY2hlbWEsIG91dHB1dFNjaGVtYSk7XG4gICAgdGhpcy5ub3JtYWxpemVfcHJpbWFyeV9rZXkob3V0cHV0U2NoZW1hKTtcbiAgICB0aGlzLm5vcm1hbGl6ZV9tYXRlcmlhbGl6ZWRfdmlld3Mob3V0cHV0U2NoZW1hKTtcbiAgICB0aGlzLm5vcm1hbGl6ZV9pbmRleGVzKG91dHB1dFNjaGVtYSk7XG4gICAgdGhpcy5ub3JtYWxpemVfY3VzdG9tX2luZGV4ZXMob3V0cHV0U2NoZW1hKTtcblxuICAgIHJldHVybiBvdXRwdXRTY2hlbWE7XG4gIH0sXG5cbiAgcmVtb3ZlX2RlcGVuZGVudF92aWV3c19mcm9tX25vcm1hbGl6ZWRfc2NoZW1hKG5vcm1hbGl6ZWREQlNjaGVtYSwgZGJTY2hlbWEsIGZpZWxkTmFtZSkge1xuICAgIGNvbnN0IGRlcGVuZGVudFZpZXdzID0gW107XG4gICAgT2JqZWN0LmtleXMobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cykuZm9yRWFjaCgoZGJWaWV3TmFtZSkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3NbZGJWaWV3TmFtZV0uc2VsZWN0LmluY2x1ZGVzKGZpZWxkTmFtZSkpIHtcbiAgICAgICAgZGVwZW5kZW50Vmlld3MucHVzaChkYlZpZXdOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5zZWxlY3RbMF0gPT09ICcqJykge1xuICAgICAgICBkZXBlbmRlbnRWaWV3cy5wdXNoKGRiVmlld05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLmtleS5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKF8uaXNBcnJheShub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLmtleVswXSlcbiAgICAgICAgICAgICAgICAgICYmIG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3NbZGJWaWV3TmFtZV0ua2V5WzBdLmluY2x1ZGVzKGZpZWxkTmFtZSkpIHtcbiAgICAgICAgZGVwZW5kZW50Vmlld3MucHVzaChkYlZpZXdOYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkZXBlbmRlbnRWaWV3cy5mb3JFYWNoKCh2aWV3TmFtZSkgPT4ge1xuICAgICAgbm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1t2aWV3TmFtZV0gPSB7fTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplcjtcbiJdfQ==